create table if not exists public.profiles (
  id uuid not null,
  email text null,
  tenant_id uuid null,
  user_role text null default 'ADMIN'::text,
  constraint profiles_pkey primary key (id),
  constraint profiles_id_fkey foreign KEY (id) references auth.users (id) on delete CASCADE,
  constraint profiles_tenant_id_fkey foreign KEY (tenant_id) references tenants (id) on delete RESTRICT
) TABLESPACE pg_default;

create table if not exists public.profiles (
  id uuid not null,
  email text null,
  tenant_id uuid null,
  user_role text null default 'ADMIN'::text,
  constraint profiles_pkey primary key (id),
  constraint profiles_id_fkey foreign KEY (id) references auth.users (id) on delete CASCADE,
  constraint profiles_tenant_id_fkey foreign KEY (tenant_id) references tenants (id) on delete RESTRICT
) TABLESPACE pg_default;
-- Create the 'tools' table

CREATE TABLE tools (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    purpose text NOT NULL,
    description text NOT NULL,
    "howToUse" text NOT NULL,
    region text NOT NULL,
    "businessUnit" text NOT NULL,
    "languageSupport" text NOT NULL,
    cost text NOT NULL CHECK (cost IN ('Free', 'Paid')),
    access text NOT NULL CHECK (access IN ('Open', 'Controlled')),
    views integer NOT NULL DEFAULT 0,
    "createdAt" timestamp with time zone NOT NULL DEFAULT now(),
    "updatedAt" timestamp with time zone NOT NULL DEFAULT now()
);


-- RLS (Row Level Security) Policies
-- 1. Enable RLS for the tools table
ALTER TABLE tools ENABLE ROW LEVEL SECURITY;

-- 2. Allow public read access to everyone
CREATE POLICY "Allow public read access" ON tools
    FOR SELECT
    USING (true);

-- 3. Allow authenticated users to insert, update, and delete their own tools
-- Note: This assumes you have a way to link tools to users, which is not in the current schema.
-- You would need to add a user_id column to the tools table and modify the policies accordingly.
-- For now, allowing all authenticated users to perform these actions.
CREATE POLICY "Allow insert for authenticated users" ON tools
    FOR INSERT
    WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Allow update for authenticated users" ON tools
    FOR UPDATE
    USING (auth.role() = 'authenticated')
    WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Allow delete for authenticated users" ON tools
    FOR DELETE
    USING (auth.role() = 'authenticated');

-- Drop the function if it already exists to ensure a clean slate
DROP FUNCTION IF EXISTS increment_tool_view(tool_id int);

-- Create the function to increment the view count and return the updated tool
CREATE OR REPLACE FUNCTION increment_tool_view(tool_id int)
RETURNS SETOF tools AS $$
BEGIN
  -- Atomically increment the views for the specified tool
  UPDATE tools
  SET views = views + 1
  WHERE id = tool_id;

  -- Return the updated tool record
  RETURN QUERY SELECT * FROM tools WHERE id = tool_id;
END;
$$ LANGUAGE plpgsql;
