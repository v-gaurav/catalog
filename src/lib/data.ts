import { supabase } from './supabase';
import type { Tool } from './types';

export async function getTools(): Promise<Tool[]> {
  const { data, error } = await supabase.from('tools').select('*').order('createdAt', { ascending: false });
  if (error) {
    console.error('Error fetching tools:', error);
    return [];
  }
  return data || [];
}

export async function getToolById(id: string): Promise<Tool | null> {
  // Call the RPC function to increment the view count and fetch the tool
  const { data, error } = await supabase
    .rpc('increment_tool_view', { tool_id: id })
    .single();

  if (error) {
    // "PGRST116" indicates that the RPC function returned no rows, meaning the tool was not found.
    if (error.code === 'PGRST116') { 
      console.warn(`Attempted to view a tool with ID '${id}', but it was not found.`);
    } else {
      console.error(`An unexpected error occurred while fetching tool with id ${id}. Code: ${error.code}`, error.message);
    }
    return null;
  }
  return data;
}

export async function addTool(tool: Omit<Tool, 'id' | 'views' | 'createdAt' | 'updatedAt'>) {
  // The 'id' is now generated by the database by default.
  const { data, error } = await supabase.from('tools').insert([
    { ...tool, views: 0 }
  ]).select().single();

  if (error) {
    console.error('Error adding tool:', error.message);
    throw new Error('Failed to add tool to the database.');
  }

  return data;
}
